#!/usr/bin/env ruby

STDOUT.sync = true

require 'yaml'
require 'erb'
require 'active_record'
require 'optparse'

config = YAML.load(ERB.new(File.read('config/database.yml')).result)
ActiveRecord::Base.establish_connection(config[ENV['RAILS_ENV'] || 'test'])
conn = ActiveRecord::Base.connection

start = 0
batch = 100_000
total = 1_000_000
pause = nil

ARGV.options do |o|
  o.on("-s", "--start=START", Integer) { |v| start = v }
  o.on('-b', "--batch=BATCH", Integer) { |v| batch = v }
  o.on('-t', "--total=TOTAL", Integer) { |v| total = v }
  o.on("-p", "--pause=PAUSE", Integer) { |v| pause = v }
  o.parse!
end

max_id = conn.select_values("select id from requests order by id desc limit 1").first.to_i

total = start + total
total = max_id if total > max_id

SQL = <<~sql
  insert into request_payloads (request_id, payload, created_at)
  select r.id, r.payload, r.created_at
  from requests r
  left outer join request_payloads p on p.request_id = r.id
  where r.id between %i and %i and r.payload is not null and p.id is null
sql

start.step(total - 1, batch) do |min_id|
  now = Time.now
  max_id = min_id + batch - 1
  print "Inserting payloads from requests #{min_id} - #{max_id} ... "
  query = SQL % [min_id, max_id]
  conn.execute(query)
  elapsed = (Time.now - now)
  puts "#{elapsed.round(2)} sec"
  sleep pause if pause
end
